import logging

from odoo import fields, models, api

from odoo.osv import expression

_logger = logging.getLogger(__name__)


class GenericResourceMixinInvNumber(models.AbstractModel):
    ''' generic_resource_mixin_inv_number model is meant to be inherited by
     any model that needs to have automatically generated field inv_number for
     inventory number.
     For use it you must create sequence in "ir.sequence" model in data
     directory.
     For example:
        <record id="id_for_your_sequence" model="ir.sequence">
            <field name="name">name_for_your_sequence</field>
            <field name="code">code_for_your_sequence</field>
            <field name="prefix">prefix_for_your_inv_number</field>
            <field name="padding">count_of_integer_in_your_inv_number</field>
        </record>

     And use it in model definition. For example:

     class YourModel(models.Model):
         _name = 'your.model'
         _inherit = 'generic.resource.mixin.inv.number'

         _inv_number_seq_code = 'your_addon.id_for_your_sequence'

     It's all!
     Field inv_number will be automatically added to your model.
     Values for it will be generated by sequence
      'your_addon.id_for_your_sequence'.
     '''
    _name = 'generic.resource.mixin.inv.number'
    _description = 'Generic Resource Mixin Inv Number'
    _inv_number_seq_code = None
    _inv_number_in_display_name = False

    inv_number = fields.Char(
        'Inventory Number', index=True, required=True,
        readonly=True, default='', copy=False)

    @api.model
    def create(self, vals):
        if self._inv_number_seq_code is not None and (
                not vals.get('inv_number')):
            vals['inv_number'] = self.env['ir.sequence'].next_by_code(
                self._inv_number_seq_code)
        result = super(GenericResourceMixinInvNumber, self).create(vals)
        return result

    def name_get(self):
        result = super(GenericResourceMixinInvNumber, self).name_get()
        if not self._inv_number_in_display_name:
            return result

        name_map = dict(result)
        result = []
        for rec in self:
            result.append(
                (rec.id, "%s [%s]" % (name_map[rec.id], rec.inv_number))
            )
        return result

    @api.model
    def name_search(self, name='', args=None, operator='ilike', limit=100):
        # TODO: replace by 'generic.mixin.namesearch.by.fields' mixin
        if not args:
            args = []
        if name:
            domain = [
                [('inv_number', operator, name)]
            ]
            if self._rec_name:
                domain += [
                    [(self._rec_name, operator, name)],
                ]
            if operator in expression.NEGATIVE_TERM_OPERATORS:
                domain = expression.AND(domain)
            else:
                domain = expression.OR(domain)

            domain = expression.AND([domain, args])
            records = self.search(domain, limit=limit)
        else:
            records = self.search(args, limit=limit)
        return records.name_get()
